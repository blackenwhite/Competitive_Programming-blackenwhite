// Sliding Median
// Nabajyoti Majumdar
// using Two Multisets

#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using vi = vector<int>;
#define pb push_back
#define rsz resize
#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()
using pii = pair<int,int>;
#define f first
#define s second
#define mp make_pair
const ll mod=1e9+7;
const int inf=INT_MAX;

void setIO(string name = "") { // name is nonempty for USACO file I/O

      ios_base::sync_with_stdio(0); cin.tie(0); // see Fast Input & Output

      // if(sz(name)){

      //       freopen((name+".in").c_str(), "r", stdin); // see Input & Output

      //       freopen((name+".out").c_str(), "w", stdout);

      // }
      return;

}

int dir[4][2]={{0,1},{1,0},{-1,0},{0,-1}};

ll N,M;
ll arr[200010];
multiset<ll>up,low;

// for inserting a new value
void ins(ll val){
   ll a=*low.rbegin();
   if(a<val){
      up.insert(val);
      if(up.size()>M/2){
         low.insert(*up.begin());
         up.erase(up.find(*up.begin()));
      }
   }else{
      low.insert(val);
      if(low.size()>(M+1)/2){
         up.insert(*low.rbegin());
         low.erase(low.find(*low.rbegin()));
      }
   }
}

// to erase a val 
void er(ll val){
   if(up.find(val)!=up.end()) up.erase(up.find(val));
   else low.erase(low.find(val));

   if(low.empty()){
      low.insert(*up.begin());
      up.erase(up.find(*up.begin()));
   }
}


int main(){
   setIO();
   
   //--------------//
   cin>>N>>M;
   for(int i=0;i<N;i++) cin>>arr[i];
   low.insert(arr[0]);
   for(int i=1;i<M;i++){
      ins(arr[i]);
   }

   cout<<*low.rbegin()<<" ";
   for(ll i=M;i<N;i++){
      if(M==1){
         ins(arr[i]);
         er(arr[i-M]);

      }else{
         er(arr[i-M]);
         ins(arr[i]);
      }
      cout<<*low.rbegin()<<" ";
   }
   cout<<endl;
   //------------//


   return 0;
}

